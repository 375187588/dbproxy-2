!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALERT_LOG	common/log.hpp	168;"	d
ALERT_LOG	common/log.hpp	173;"	d
BOOT_FAIL	common/log.cpp	290;"	d	file:
BOOT_LOG	common/log.hpp	332;"	d
BOOT_LOG2	common/log.hpp	343;"	d
BOOT_OK	common/log.cpp	289;"	d	file:
CRIT_LOG	common/log.hpp	190;"	d
CRIT_LOG	common/log.hpp	195;"	d
DATABASE_INC	DataBase.hpp	2;"	d
DEBUG_LOG	common/log.hpp	296;"	d
DEBUG_LOG	common/log.hpp	301;"	d
DEBUG_RETURN	common/log.hpp	398;"	d
DEBUG_RETURN_VOID	common/log.hpp	409;"	d
DETAIL	common/log.hpp	121;"	d
DETAIL	common/log.hpp	124;"	d
DataBase	DataBase.hpp	/^  DataBase() $/;"	f	class:DataBase	access:public	signature:()
DataBase	DataBase.hpp	/^class DataBase$/;"	c
DataBase::DataBase	DataBase.hpp	/^  DataBase() $/;"	f	class:DataBase	access:public	signature:()
DataBase::_last_query	DataBase.hpp	/^  std::string _last_query; \/\/最后一条SQL$/;"	m	class:DataBase	access:private
DataBase::_mysql	DataBase.hpp	/^  MYSQL _mysql;$/;"	m	class:DataBase	access:private
DataBase::_res	DataBase.hpp	/^  MYSQL_RES *_res;$/;"	m	class:DataBase	access:private
DataBase::_row	DataBase.hpp	/^  MYSQL_ROW _row;$/;"	m	class:DataBase	access:private
DataBase::addFriendShip	DataBase.cpp	/^UInt32 DataBase::addFriendShip(FriendMng* friendMng, UInt32 friendId)$/;"	f	class:DataBase	signature:(FriendMng* friendMng, UInt32 friendId)
DataBase::clientRegister	DataBase.cpp	/^UInt32 DataBase::clientRegister(Player *player, ProtocolReader &br)$/;"	f	class:DataBase	signature:(Player *player, ProtocolReader &br)
DataBase::connectDB	DataBase.cpp	/^bool DataBase::connectDB()$/;"	f	class:DataBase	signature:()
DataBase::connectDB	DataBase.hpp	/^  bool connectDB();$/;"	p	class:DataBase	access:private	signature:()
DataBase::deleteMail	DataBase.cpp	/^void DataBase::deleteMail(const MailBase *mail)$/;"	f	class:DataBase	signature:(const MailBase *mail)
DataBase::disconnectDB	DataBase.cpp	/^bool DataBase::disconnectDB()$/;"	f	class:DataBase	signature:()
DataBase::disconnectDB	DataBase.hpp	/^  bool disconnectDB();$/;"	p	class:DataBase	access:private	signature:()
DataBase::getResult	DataBase.cpp	/^bool DataBase::getResult(const std::string& sql) $/;"	f	class:DataBase	signature:(const std::string& sql)
DataBase::getResult	DataBase.hpp	/^  bool getResult(const std::string& sql) ;$/;"	p	class:DataBase	access:private	signature:(const std::string& sql)
DataBase::getUserId	DataBase.cpp	/^UInt32 DataBase::getUserId(UInt8 channel, UInt64 loginId)$/;"	f	class:DataBase	signature:(UInt8 channel, UInt64 loginId)
DataBase::getUserInfo	DataBase.cpp	/^bool DataBase::getUserInfo(PlayerData &data, UInt32 userId)$/;"	f	class:DataBase	signature:(PlayerData &data, UInt32 userId)
DataBase::handleFriendShip	DataBase.cpp	/^UInt32 DataBase::handleFriendShip(Player *player, UInt32 friendId, UInt32 action)$/;"	f	class:DataBase	signature:(Player *player, UInt32 friendId, UInt32 action)
DataBase::init	DataBase.cpp	/^bool DataBase::init() $/;"	f	class:DataBase	signature:()
DataBase::init	DataBase.hpp	/^  bool init() ;$/;"	p	class:DataBase	access:public	signature:()
DataBase::interactiveConnect	DataBase.cpp	/^void DataBase::interactiveConnect()$/;"	f	class:DataBase	signature:()
DataBase::interactiveConnect	DataBase.hpp	/^  void interactiveConnect();$/;"	p	class:DataBase	access:private	signature:()
DataBase::isExists	DataBase.cpp	/^bool DataBase::isExists(const std::string& sql)$/;"	f	class:DataBase	signature:(const std::string& sql)
DataBase::isExists	DataBase.hpp	/^  bool isExists(const std::string& sql);$/;"	p	class:DataBase	access:private	signature:(const std::string& sql)
DataBase::loadAchiev	DataBase.cpp	/^void DataBase::loadAchiev(AchieveMng *mng)$/;"	f	class:DataBase	signature:(AchieveMng *mng)
DataBase::loadFriend	DataBase.cpp	/^void DataBase::loadFriend(FriendMng* friendMng)$/;"	f	class:DataBase	signature:(FriendMng* friendMng)
DataBase::loadItem	DataBase.cpp	/^void DataBase::loadItem(ItemMng *mng)$/;"	f	class:DataBase	signature:(ItemMng *mng)
DataBase::loadMail	DataBase.cpp	/^void DataBase::loadMail(MailMng *mng)$/;"	f	class:DataBase	signature:(MailMng *mng)
DataBase::loadOfflinePlayerInfo	DataBase.cpp	/^OffPData *DataBase::loadOfflinePlayerInfo(UInt32 uid)$/;"	f	class:DataBase	signature:(UInt32 uid)
DataBase::loadRank	DataBase.cpp	/^void DataBase::loadRank(GlobalRankingMng *mng)$/;"	f	class:DataBase	signature:(GlobalRankingMng *mng)
DataBase::loadResult	DataBase.cpp	/^bool DataBase::loadResult(ResultMng *mng)$/;"	f	class:DataBase	signature:(ResultMng *mng)
DataBase::query	DataBase.cpp	/^bool DataBase::query(const std::string& sql)$/;"	f	class:DataBase	signature:(const std::string& sql)
DataBase::query	DataBase.hpp	/^  bool query(const std::string& sql) ;$/;"	p	class:DataBase	access:private	signature:(const std::string& sql)
DataBase::saveItemToDB	DataBase.cpp	/^void DataBase::saveItemToDB(UInt32 uid, UInt32 tempId, UInt16 itemId, UInt32 vTime,$/;"	f	class:DataBase	signature:(UInt32 uid, UInt32 tempId, UInt16 itemId, UInt32 vTime, const std::string &bNick, UInt8 canUseTimes)
DataBase::saveMail	DataBase.cpp	/^void DataBase::saveMail(const MailBase *mail)$/;"	f	class:DataBase	signature:(const MailBase *mail)
DataBase::savePlayerInfo	DataBase.cpp	/^void DataBase::savePlayerInfo(UInt8 type, const Player *player)$/;"	f	class:DataBase	signature:(UInt8 type, const Player *player)
DataBase::saveRank	DataBase.cpp	/^void DataBase::saveRank(GlobalRankingMng *mng)$/;"	f	class:DataBase	signature:(GlobalRankingMng *mng)
DataBase::saveResult	DataBase.cpp	/^void DataBase::saveResult(ResultMng *mng)$/;"	f	class:DataBase	signature:(ResultMng *mng)
DataBase::saveUserOfflineInfo	DataBase.cpp	/^void DataBase::saveUserOfflineInfo(Player *player)$/;"	f	class:DataBase	signature:(Player *player)
DataBase::unInit	DataBase.cpp	/^void DataBase::unInit() $/;"	f	class:DataBase	signature:()
DataBase::unInit	DataBase.hpp	/^  void unInit();$/;"	p	class:DataBase	access:public	signature:()
DataBase::update	DataBase.hpp	/^  void update( UInt32 now );$/;"	p	class:DataBase	access:public	signature:( UInt32 now )
DataBase::updateSendChipTime	DataBase.cpp	/^void DataBase::updateSendChipTime(FriendMng* friendMng, UInt32 friendId, UInt32 time)$/;"	f	class:DataBase	signature:(FriendMng* friendMng, UInt32 friendId, UInt32 time)
DataBase::~DataBase	DataBase.hpp	/^	~DataBase() {} $/;"	f	class:DataBase	access:public	signature:()
EMERG_LOG	common/log.hpp	147;"	d
EMERG_LOG	common/log.hpp	152;"	d
ERROR_LOG	common/log.hpp	211;"	d
ERROR_LOG	common/log.hpp	216;"	d
ERROR_RETURN	common/log.hpp	354;"	d
ERROR_RETURN_VOID	common/log.hpp	365;"	d
INFO_LOG	common/log.hpp	275;"	d
INFO_LOG	common/log.hpp	280;"	d
KALERT_LOG	common/log.hpp	170;"	d
KALERT_LOG	common/log.hpp	174;"	d
KCRIT_LOG	common/log.hpp	192;"	d
KCRIT_LOG	common/log.hpp	196;"	d
KDEBUG_LOG	common/log.hpp	298;"	d
KDEBUG_LOG	common/log.hpp	302;"	d
KEMERG_LOG	common/log.hpp	149;"	d
KEMERG_LOG	common/log.hpp	153;"	d
KERROR_LOG	common/log.hpp	213;"	d
KERROR_LOG	common/log.hpp	217;"	d
KINFO_LOG	common/log.hpp	277;"	d
KINFO_LOG	common/log.hpp	281;"	d
KNOTI_LOG	common/log.hpp	256;"	d
KNOTI_LOG	common/log.hpp	260;"	d
KTRACE_LOG	common/log.hpp	320;"	d
KTRACE_LOG	common/log.hpp	324;"	d
KWARN_LOG	common/log.hpp	235;"	d
KWARN_LOG	common/log.hpp	239;"	d
LEN	DataBase.cpp	/^static const int LEN=512;$/;"	v	file:
LOG_H_	common/log.hpp	12;"	d
MAX_LOG_CNT	common/log.cpp	29;"	d	file:
NOTI_LOG	common/log.hpp	254;"	d
NOTI_LOG	common/log.hpp	259;"	d
SCREEN_COLS	common/log.cpp	288;"	d	file:
SHIFT_FD_LOCK	common/log.cpp	66;"	d	file:
SHIFT_FD_UNLOCK	common/log.cpp	70;"	d	file:
SIMPLY	common/log.hpp	129;"	d
SIMPLY	common/log.hpp	132;"	d
TRACE_LOG	common/log.hpp	318;"	d
TRACE_LOG	common/log.hpp	323;"	d
WARN_LOG	common/log.hpp	233;"	d
WARN_LOG	common/log.hpp	238;"	d
WARN_RETURN	common/log.hpp	376;"	d
WARN_RETURN_VOID	common/log.hpp	387;"	d
_last_query	DataBase.hpp	/^  std::string _last_query; \/\/最后一条SQL$/;"	m	class:DataBase	access:private
_mysql	DataBase.hpp	/^  MYSQL _mysql;$/;"	m	class:DataBase	access:private
_res	DataBase.hpp	/^  MYSQL_RES *_res;$/;"	m	class:DataBase	access:private
_row	DataBase.hpp	/^  MYSQL_ROW _row;$/;"	m	class:DataBase	access:private
addFriendShip	DataBase.cpp	/^UInt32 DataBase::addFriendShip(FriendMng* friendMng, UInt32 friendId)$/;"	f	class:DataBase	signature:(FriendMng* friendMng, UInt32 friendId)
base_filename	common/log.cpp	/^	char	base_filename[64];$/;"	m	struct:fds_t	file:	access:public
base_filename_len	common/log.cpp	/^	int		base_filename_len;$/;"	m	struct:fds_t	file:	access:public
boot_log	common/log.cpp	/^void boot_log(int ok, int dummy, const char *fmt, ...)$/;"	f	signature:(int ok, int dummy, const char *fmt, ...)
boot_log	common/log.hpp	/^void boot_log(int ok, int dummy, const char* fmt, ...);$/;"	p	signature:(int ok, int dummy, const char* fmt, ...)
cardToString	DataBase.cpp	/^inline static void cardToString(std::string &str, UInt8 type, CardBase *buf) $/;"	f	file:	signature:(std::string &str, UInt8 type, CardBase *buf)
clientRegister	DataBase.cpp	/^UInt32 DataBase::clientRegister(Player *player, ProtocolReader &br)$/;"	f	class:DataBase	signature:(Player *player, ProtocolReader &br)
color_end	common/log.cpp	/^static const char* color_end = "\\e[m";$/;"	v	file:
config_max_log_files	common/log.cpp	/^static int config_max_log_files;\/\/保存原有的max_log_files $/;"	v	file:
connectDB	DataBase.cpp	/^bool DataBase::connectDB()$/;"	f	class:DataBase	signature:()
connectDB	DataBase.hpp	/^  bool connectDB();$/;"	p	class:DataBase	access:private	signature:()
cur_day_seq_count	common/log.cpp	/^	int  	cur_day_seq_count;\/\/当天轮转文件的个数$/;"	m	struct:fds_t	file:	access:public
day	common/log.cpp	/^	int		day;$/;"	m	struct:fds_t	file:	access:public
deleteMail	DataBase.cpp	/^void DataBase::deleteMail(const MailBase *mail)$/;"	f	class:DataBase	signature:(const MailBase *mail)
disconnectDB	DataBase.cpp	/^bool DataBase::disconnectDB()$/;"	f	class:DataBase	signature:()
disconnectDB	DataBase.hpp	/^  bool disconnectDB();$/;"	p	class:DataBase	access:private	signature:()
enable_multi_thread	common/log.cpp	/^void enable_multi_thread()$/;"	f	signature:()
enable_multi_thread	common/log.hpp	/^void enable_multi_thread();$/;"	p	signature:()
fds_info	common/log.cpp	/^} fds_info[log_lvl_max];$/;"	v	typeref:struct:fds_t	file:
fds_t	common/log.cpp	/^static struct fds_t {$/;"	s	file:
fds_t::base_filename	common/log.cpp	/^	char	base_filename[64];$/;"	m	struct:fds_t	file:	access:public
fds_t::base_filename_len	common/log.cpp	/^	int		base_filename_len;$/;"	m	struct:fds_t	file:	access:public
fds_t::cur_day_seq_count	common/log.cpp	/^	int  	cur_day_seq_count;\/\/当天轮转文件的个数$/;"	m	struct:fds_t	file:	access:public
fds_t::day	common/log.cpp	/^	int		day;$/;"	m	struct:fds_t	file:	access:public
fds_t::opfd	common/log.cpp	/^	int		opfd;$/;"	m	struct:fds_t	file:	access:public
fds_t::seq	common/log.cpp	/^	int		seq;$/;"	m	struct:fds_t	file:	access:public
gDataBase	DataBase.cpp	/^DataBase gDataBase;$/;"	v
g_log_dest	common/log.cpp	/^static log_dest_t g_log_dest = log_dest_terminal; \/\/ write log to terminal by default$/;"	v	file:
g_logtime_interval	common/log.cpp	/^static int  g_logtime_interval; \/\/ 每个日志文件记录日志的总时间（秒）$/;"	v	file:
g_multi_thread	common/log.cpp	/^static int g_multi_thread;$/;"	v	file:
g_shift_fd_mutex	common/log.cpp	/^static pthread_mutex_t g_shift_fd_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
getResult	DataBase.cpp	/^bool DataBase::getResult(const std::string& sql) $/;"	f	class:DataBase	signature:(const std::string& sql)
getResult	DataBase.hpp	/^  bool getResult(const std::string& sql) ;$/;"	p	class:DataBase	access:private	signature:(const std::string& sql)
getUserId	DataBase.cpp	/^UInt32 DataBase::getUserId(UInt8 channel, UInt64 loginId)$/;"	f	class:DataBase	signature:(UInt8 channel, UInt64 loginId)
getUserInfo	DataBase.cpp	/^bool DataBase::getUserInfo(PlayerData &data, UInt32 userId)$/;"	f	class:DataBase	signature:(PlayerData &data, UInt32 userId)
get_log_seq_nonrecycle	common/log.cpp	/^get_log_seq_nonrecycle(int lvl)$/;"	f	file:	signature:(int lvl)
get_log_seq_recycle	common/log.cpp	/^get_log_seq_recycle(int lvl)$/;"	f	file:	signature:(int lvl)
get_log_time	common/log.cpp	/^inline int get_log_time()$/;"	f	signature:()
get_logfile_seqno	common/log.cpp	/^get_logfile_seqno(const char* filename, int loglvl)$/;"	f	file:	signature:(const char* filename, int loglvl)
handleFriendShip	DataBase.cpp	/^UInt32 DataBase::handleFriendShip(Player *player, UInt32 friendId, UInt32 action)$/;"	f	class:DataBase	signature:(Player *player, UInt32 friendId, UInt32 action)
has_init	common/log.cpp	/^static int has_init;$/;"	v	file:
init	DataBase.cpp	/^bool DataBase::init() $/;"	f	class:DataBase	signature:()
init	DataBase.hpp	/^  bool init() ;$/;"	p	class:DataBase	access:public	signature:()
interactiveConnect	DataBase.cpp	/^void DataBase::interactiveConnect()$/;"	f	class:DataBase	signature:()
interactiveConnect	DataBase.hpp	/^  void interactiveConnect();$/;"	p	class:DataBase	access:private	signature:()
isExists	DataBase.cpp	/^bool DataBase::isExists(const std::string& sql)$/;"	f	class:DataBase	signature:(const std::string& sql)
isExists	DataBase.hpp	/^  bool isExists(const std::string& sql);$/;"	p	class:DataBase	access:private	signature:(const std::string& sql)
isVaildNCL	DataBase.cpp	/^inline bool isVaildNCL(UInt8 type)$/;"	f	signature:(UInt8 type)
likely	common/log.cpp	20;"	d	file:
likely	common/log.cpp	22;"	d	file:
loadAchiev	DataBase.cpp	/^void DataBase::loadAchiev(AchieveMng *mng)$/;"	f	class:DataBase	signature:(AchieveMng *mng)
loadFriend	DataBase.cpp	/^void DataBase::loadFriend(FriendMng* friendMng)$/;"	f	class:DataBase	signature:(FriendMng* friendMng)
loadItem	DataBase.cpp	/^void DataBase::loadItem(ItemMng *mng)$/;"	f	class:DataBase	signature:(ItemMng *mng)
loadMail	DataBase.cpp	/^void DataBase::loadMail(MailMng *mng)$/;"	f	class:DataBase	signature:(MailMng *mng)
loadOfflinePlayerInfo	DataBase.cpp	/^OffPData *DataBase::loadOfflinePlayerInfo(UInt32 uid)$/;"	f	class:DataBase	signature:(UInt32 uid)
loadRank	DataBase.cpp	/^void DataBase::loadRank(GlobalRankingMng *mng)$/;"	f	class:DataBase	signature:(GlobalRankingMng *mng)
loadResult	DataBase.cpp	/^bool DataBase::loadResult(ResultMng *mng)$/;"	f	class:DataBase	signature:(ResultMng *mng)
log_buf_sz	common/log.cpp	/^	log_buf_sz	= 8192$/;"	e	enum:__anon1	file:
log_color	common/log.cpp	/^static const char* log_color[] = {$/;"	v	file:
log_dest	common/log.hpp	/^typedef enum log_dest {$/;"	g
log_dest_both	common/log.hpp	/^	log_dest_both		= 3$/;"	e	enum:log_dest
log_dest_file	common/log.hpp	/^	log_dest_file		= 2,$/;"	e	enum:log_dest
log_dest_t	common/log.hpp	/^} log_dest_t;$/;"	t	typeref:enum:log_dest
log_dest_terminal	common/log.hpp	/^	log_dest_terminal	= 1,$/;"	e	enum:log_dest
log_dir	common/log.cpp	/^static char log_dir[256];$/;"	v	file:
log_file_name	common/log.cpp	/^log_file_name(int lvl, int seq, char* file_name, const struct tm* tm)$/;"	f	file:	signature:(int lvl, int seq, char* file_name, const struct tm* tm)
log_file_path	common/log.cpp	/^log_file_path(int lvl, int seq, char* file_name, const struct tm* tm)$/;"	f	file:	signature:(int lvl, int seq, char* file_name, const struct tm* tm)
log_init	common/log.cpp	/^int log_init(const char* dir, log_lvl_t lvl, uint32_t size, int maxfiles, const char* pre_name)$/;"	f	signature:(const char* dir, log_lvl_t lvl, uint32_t size, int maxfiles, const char* pre_name)
log_init	common/log.hpp	/^int  log_init(const char* dir, log_lvl_t lvl, uint32_t size, int maxfiles, const char* pre_name);$/;"	p	signature:(const char* dir, log_lvl_t lvl, uint32_t size, int maxfiles, const char* pre_name)
log_init_t	common/log.cpp	/^int log_init_t(const char* dir, log_lvl_t lvl, const char* pre_name, int logtime)$/;"	f	signature:(const char* dir, log_lvl_t lvl, const char* pre_name, int logtime)
log_init_t	common/log.hpp	/^int log_init_t(const char* dir, log_lvl_t lvl, const char* pre_name, int logtime);$/;"	p	signature:(const char* dir, log_lvl_t lvl, const char* pre_name, int logtime)
log_level	common/log.cpp	/^static log_lvl_t  log_level	 = log_lvl_debug;	  \/\/ default log level$/;"	v	file:
log_lvl	common/log.hpp	/^typedef enum log_lvl {$/;"	g
log_lvl_alert	common/log.hpp	/^	log_lvl_alert,$/;"	e	enum:log_lvl
log_lvl_crit	common/log.hpp	/^	log_lvl_crit,$/;"	e	enum:log_lvl
log_lvl_debug	common/log.hpp	/^	log_lvl_debug,$/;"	e	enum:log_lvl
log_lvl_emerg	common/log.hpp	/^	log_lvl_emerg,$/;"	e	enum:log_lvl
log_lvl_error	common/log.hpp	/^	log_lvl_error,$/;"	e	enum:log_lvl
log_lvl_info	common/log.hpp	/^	log_lvl_info,$/;"	e	enum:log_lvl
log_lvl_max	common/log.hpp	/^	log_lvl_max$/;"	e	enum:log_lvl
log_lvl_notice	common/log.hpp	/^	log_lvl_notice,$/;"	e	enum:log_lvl
log_lvl_t	common/log.hpp	/^} log_lvl_t;$/;"	t	typeref:enum:log_lvl
log_lvl_trace	common/log.hpp	/^	log_lvl_trace,$/;"	e	enum:log_lvl
log_lvl_warning	common/log.hpp	/^	log_lvl_warning,$/;"	e	enum:log_lvl
log_pre	common/log.cpp	/^static char log_pre[32];$/;"	v	file:
log_size	common/log.cpp	/^static uint32_t log_size;$/;"	v	file:
lognames	common/log.cpp	/^static const char* lognames[] = { "emerg", "alert", "crit", "error",$/;"	v	file:
main	test.cpp	/^int main() {$/;"	f	signature:()
max_log_files	common/log.cpp	/^static int max_log_files;$/;"	v	file:
open_fd	common/log.cpp	/^open_fd(int lvl, const struct tm* tm)$/;"	f	file:	signature:(int lvl, const struct tm* tm)
opfd	common/log.cpp	/^	int		opfd;$/;"	m	struct:fds_t	file:	access:public
query	DataBase.cpp	/^bool DataBase::query(const std::string& sql)$/;"	f	class:DataBase	signature:(const std::string& sql)
query	DataBase.hpp	/^  bool query(const std::string& sql) ;$/;"	p	class:DataBase	access:private	signature:(const std::string& sql)
request_log_seq	common/log.cpp	/^request_log_seq(int lvl)$/;"	f	file:	signature:(int lvl)
rm_files_by_seqno	common/log.cpp	/^rm_files_by_seqno(int loglvl, int seqno, const struct tm* tm)$/;"	f	file:	signature:(int loglvl, int seqno, const struct tm* tm)
saveItemToDB	DataBase.cpp	/^void DataBase::saveItemToDB(UInt32 uid, UInt32 tempId, UInt16 itemId, UInt32 vTime,$/;"	f	class:DataBase	signature:(UInt32 uid, UInt32 tempId, UInt16 itemId, UInt32 vTime, const std::string &bNick, UInt8 canUseTimes)
saveMail	DataBase.cpp	/^void DataBase::saveMail(const MailBase *mail)$/;"	f	class:DataBase	signature:(const MailBase *mail)
savePlayerInfo	DataBase.cpp	/^void DataBase::savePlayerInfo(UInt8 type, const Player *player)$/;"	f	class:DataBase	signature:(UInt8 type, const Player *player)
saveRank	DataBase.cpp	/^void DataBase::saveRank(GlobalRankingMng *mng)$/;"	f	class:DataBase	signature:(GlobalRankingMng *mng)
saveResult	DataBase.cpp	/^void DataBase::saveResult(ResultMng *mng)$/;"	f	class:DataBase	signature:(ResultMng *mng)
saveUserOfflineInfo	DataBase.cpp	/^void DataBase::saveUserOfflineInfo(Player *player)$/;"	f	class:DataBase	signature:(Player *player)
seq	common/log.cpp	/^	int		seq;$/;"	m	struct:fds_t	file:	access:public
set_log_dest	common/log.cpp	/^void set_log_dest(log_dest_t dest)$/;"	f	signature:(log_dest_t dest)
set_log_dest	common/log.hpp	/^void set_log_dest(log_dest_t dest);$/;"	p	signature:(log_dest_t dest)
shift_fd	common/log.cpp	/^static int shift_fd(int lvl, const struct tm* tm)$/;"	f	file:	signature:(int lvl, const struct tm* tm)
sqlBuf	DataBase.cpp	/^static char sqlBuf[LEN]; \/\/sql 语句buf$/;"	v	file:
stringToCadrs	DataBase.cpp	/^inline static void stringToCadrs(const std::string &str, ResultSet &set)$/;"	f	file:	signature:(const std::string &str, ResultSet &set)
unInit	DataBase.cpp	/^void DataBase::unInit() $/;"	f	class:DataBase	signature:()
unInit	DataBase.hpp	/^  void unInit();$/;"	p	class:DataBase	access:public	signature:()
unlikely	common/log.cpp	25;"	d	file:
unlikely	common/log.cpp	27;"	d	file:
update	DataBase.hpp	/^  void update( UInt32 now );$/;"	p	class:DataBase	access:public	signature:( UInt32 now )
updateSendChipTime	DataBase.cpp	/^void DataBase::updateSendChipTime(FriendMng* friendMng, UInt32 friendId, UInt32 time)$/;"	f	class:DataBase	signature:(FriendMng* friendMng, UInt32 friendId, UInt32 time)
write_log	common/log.cpp	/^void write_log(int lvl,uint32_t key, const char *fmt, ...)$/;"	f	signature:(int lvl,uint32_t key, const char *fmt, ...)
write_log	common/log.hpp	/^void write_log(int lvl,uint32_t key, const char* fmt, ...);$/;"	p	signature:(int lvl,uint32_t key, const char* fmt, ...)
write_syslog	common/log.cpp	/^void write_syslog(int lvl, const char* fmt, ...)$/;"	f	signature:(int lvl, const char* fmt, ...)
write_syslog	common/log.hpp	/^void write_syslog(int lvl, const char* fmt, ...);$/;"	p	signature:(int lvl, const char* fmt, ...)
~DataBase	DataBase.hpp	/^	~DataBase() {} $/;"	f	class:DataBase	access:public	signature:()
